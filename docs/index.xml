<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tegola - Vector tile server (MVT)</title>
    <link>http://tegola.io/</link>
    <description>Recent content on Tegola - Vector tile server (MVT)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    
	<atom:link href="http://tegola.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started</title>
      <link>http://tegola.io/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/getting-started/</guid>
      <description>1. Download Tegola Choose the binary that matches the operating system Tegola will run on. Find the Tegola file that was downloaded, unzip it, and move it into a fresh directory. Rename this file tegola.
2. Set up a data provider Tegola needs geospatial data to run. Currently, Tegola supports PostGIS which is a geospatial extension for PostgreSQL, and GeoPackage. If you don&amp;rsquo;t have PostGIS installed, download PostGIS.
You&amp;rsquo;ll need to load your data provider with data.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://tegola.io/configuration/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/configuration/</guid>
      <description>Overview The Tegola config file uses TOML syntax and is comprised of three primary sections:
 Webserver: webserver configuration. Providers: data provider configuration (i.e. PostGIS). Maps: map configuration including map names, layers and zoom levels.  Webserver The webserver part of the config has the following parameters:
   Param Required Default Description     port No :8080 A string with the value for port.   hostname No HTTP Hostname in request Override the hostname used to generate URLs.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>http://tegola.io/debugging/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/debugging/</guid>
      <description>Environment Variables The following environment variables can be used for debugging the tegola server:
SQL_DEBUG: specify the type of SQL debug information to output. Supports the following values:
 LAYER_SQL: print layer SQL as they&amp;rsquo;re parsed from the config file. EXECUTE_SQL: print SQL that is executed for each tile request and the number of items it returns or an error. LAYER_SQL:EXECUTE_SQL: print LAYER_SQL and EXECUTE_SQL.  Example $ SQL_DEBUG=LAYER_SQL tegola --config=/path/to/conf.</description>
    </item>
    
    <item>
      <title>HTTP endpoints</title>
      <link>http://tegola.io/endpoints/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/endpoints/</guid>
      <description>The following endpoints are used for communicating with Tegola over HTTP. All the endpoints expect a HTTP GET request.
/maps/:map/:z/:x/:y Will return a vector tile from the provided :map at the provided :z, :x: and :y values.
URL parameters  :map: The name of the map as defined in the Tegola config file. :z: The tile zoom. :x: The tile row. :y: The tile column.  /maps/:map/:layer/:z/:x/:y Will return a vector tile with a single :layer from the provided :map at the provided :z, :x: and :y values.</description>
    </item>
    
    <item>
      <title>Welcome to Tegola</title>
      <link>http://tegola.io/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/</guid>
      <description>Tegola is a high performance Mapbox Vector Tile server written in Go. In a nutshell, Tegola takes geospatial data and slices it into vector tiles that can be efficiently delivered to any client. Tegola is creating and serving the vector tiles in the following map of San Diego, California:
 Tegola is:  Simple to setup. All you need is the Tegola binary and a config file. Extensible. Tegola is designed to support multiple data providers.</description>
    </item>
    
  </channel>
</rss>